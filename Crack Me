Crack me : 5470E76FFFE91A100BF83F6A6BCA0737918400CF

;Structure:
WNDCLASSA struc	; (sizeof=0x28,	standard type)
style dd ?
lpfnWndProc dd ?	; offset
cbClsExtra dd ?
cbWndExtra dd ?
hInstance dd ?		; offset
hIcon dd ?		; offset
hCursor	dd ?		; offset
hbrBackground dd ?	; offset
lpszMenuName dd	?	; offset
lpszClassName dd ?	; offset
WNDCLASSA ends

public start ; main Program 
start proc near ; prolog 

push	0		; lpModuleName Null means exe, else name of dll
call	GetModuleHandleA ;REF MSDN "If this parameter is NULL,
                       ;GetModuleHandle returns a handle to the file used to create the calling process (.exe file)."
                       ; output in EAX obviously 
mov	ds:hInstance, eax ; copy the value to the Data Segment "4020CA"
push	0		; lpWindowName name of window if null it will take the ClassName
push	offset ClassName ; "No need to disasm the code!"  ;lpClassName
call	FindWindowA ; REF MSDN If lpClassName points to a string, it specifies the window class name. 
                  ;The class name can be any name registered with RegisterClass or RegisterClassEx, 
                  ;or any of the predefined control-class names. 
or	eax, eax      ; it returned Null
jz	short loc_40101D ; Jump To other subroutine 
retn


loc_40101D:
mov	ds:WndClass.style, 4003h ; // initialising the valuse of WndClass Structure  16387 in decimal
mov	ds:WndClass.lpfnWndProc, offset	WndProc ; A pointer to the window procedure
mov	ds:WndClass.cbClsExtra,	0 ;The number of extra bytes to allocate following the window-class structure.  default is 0
mov	ds:WndClass.cbWndExtra,	0 ; The number of extra bytes to allocate following the window instance default 0
mov	eax, ds:hInstance ;  Module handle copied to Acumlator 
mov	ds:WndClass.hInstance, eax ; Module handle is copied in WndClass.hInstance 
push	64h		; lpIconName icon name pushed in stack
push	eax		; hInstance module handle pushed into stack 
call	LoadIconA ; user32dll ^^^^ Loads the specified icon resource from the executable (.exe) file associated with an application instance.
mov	ds:WndClass.hIcon, eax ; handle to newly loaded icon saved in wndClass struct
push	7F00h		; lpCursorName ;cursor name
push	0		; hInstance ; cursor instance instanace of desktop wecan say
call	LoadCursorA ; ^^^^ Loads the specified cursor resource from the executable (.EXE) file associated with an application instance
mov	ds:WndClass.hCursor, eax ;  saved the cursor properties in WndClass 
mov	ds:WndClass.hbrBackground, 5; set the background of window
mov	ds:WndClass.lpszMenuName, offset aMenu ; "MENU" set meanu name 
mov	ds:WndClass.lpszClassName, offset ClassName ; "No need to disasm the code!" set the windows name 
push	offset WndClass	; lpWndClass push the WndClass in stack so that we can call the function RegisterClass 
call	RegisterClassA ; ^^^^ Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. return class atom which uniquely id the class being registered 
push	0		; lpParam ; way to create a window , Param is 0 as no aditional data is nedded as no multiple Documnet interface 
push	ds:hInstance	; hInstance handle of the Module 
push	0		; hMenu ; NULL
push	0		; hWndParent NULL
push	8000h		; nHeight
push	8000h		; nWidth
push	6Eh		; Y 110px axis
push	0B4h		; X 180px axis
push	0CF0000h	; dwStyle overlapped windows 
push	offset WindowName ; "CrackMe v1.0"
push	offset ClassName ; "No need to disasm the code!"
push	0		; dwExStyle ; exit style 
call	CreateWindowExA ; ^^^^ Creates an extended window 
mov	ds:hWnd, eax ; handle to new class is stored in hWnd 
push	1		; nCmdShow show state shownormal 
push	ds:hWnd		; hWnd  windows handle 
call	ShowWindow ; ^^^^ Sets the specified window's show state.  
push	ds:hWnd		; hWnd again pushed the windows handle for new routine 
call	UpdateWindow ; ^^^^ It will update the client are of specified windows 
push	1		; bErase true
push	0		; lpRect NULL
push	dword ptr [ebp+8] ; hWnd
call	InvalidateRect ; ^^^^ The InvalidateRect function adds a rectangle to the specified window's update region. 
                      ;The update region represents the portion of the window's client area that must be redrawn.

loc_4010F1:		
push	0   ; wMsgFilterMax = 0
push	0		; wMsgFilterMin = 0
push	0		; hWnd handle to windows 
push	offset Msg	; lpMsg ^^^^ A pointer to an MSG structure that receives message information from the thread's message queue
call	GetMessageA ; ^^^^ Retrieves a message from the calling thread's message queue. 
                  ;The function dispatches incoming sent messages until a posted message is available for retrieval. 
cmp	ax, 0 ; if the returned value is -1 , 1 or 0 
jz	short loc_40111D ; if 0 exit the module 
push	offset Msg	; lpMsg else prepare calling   TranslateMessage 
call	TranslateMessage ; ^^^^ Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, 
                       ;to be read the next time the thread calls the GetMessage 
push	offset Msg	; lpMsg 
call	DispatchMessageA ;  Dispatches a message to a window procedure. 
                       ;It is typically used to dispatch a message retrieved by the GetMessage function.
jmp	short loc_4010F1

loc_40111D:		; uExitCode
push	ds:Msg.wParam
call	ExitProcess
start endp

; then we have a WinProc module as main program 

loc_4011ED:		; dwInitParam
push	0
push	offset DialogFunc ; lpDialogFunc
push	[ebp+hWndParent] ; hWndParent
push	offset TemplateName ; "DLG_ABOUT"
push	ds:hInstance	; hInstance
call	DialogBoxParamA ;Creates a modal dialog box from a dialog box template resource. for username
jmp	short loc_4011E6

loc_401209:		; dwInitParam
push	0
push	offset sub_401253 ; lpDialogFunc
push	[ebp+hWndParent] ; hWndParent
push	offset aDlg_regis ; "DLG_REGIS"
push	ds:hInstance	; hInstance
call	DialogBoxParamA; Creates a modal dialog box from a dialog box template resource. for password 
cmp	eax, 0 ; test for null
jz	short loc_4011E6 ; if null exit 
push	offset String ; push string to stack 
call	sub_40137E  ;funation to encode username ; 
push	eax ;push result to stack 
push	offset byte_40217E ; push the pass code string to stack 
call	sub_4013D8 ; encode the passcode string 
add	esp, 4 ; remove the four bytes from stack
pop	eax ; pop eax
cmp	eax, ebx ; compare eax and ebx
jz	short loc_40124C  ; if equal print great work 
call	sub_401362 ; else call no luck mate
jmp	short loc_4011E6 ; exit  wnd proc.

loc_40124C:
call	sub_40134D
jmp	short loc_4011E6
WndProc	endp
;end of wndProc function;


;Logic Code  for user name function ;
sub_40137E proc	near // start the function 

arg_0= dword ptr  4 ; initialise the local vairable offset 4 in stack pointer 

mov	esi, [esp+arg_0] ; vidyasagar entered string 
push	esi ; pushed it to stack

loc_401383:  ;@@
mov	al, [esi]  ; move the first word to accumlator 
test	al, al ; test if al al
jz	short loc_40139C ; if value is zero then move to this 
cmp	al, 41h ; compare the value with 41h i.e 65 or A
jb	short loc_4013AC ; if it is lower than it jump to loc_4013AC  No luck .
cmp	al, 5Ah ; compare value with 5Ah, Z or 90
jnb	short loc_401394 ;if value is higher than 5Ah, Z or 90 jump  loc_401394 convert the value to uppercase 
inc	esi ; increament the esi value, means next value in stack 
jmp	short loc_401383 ; loop @@


loc_401394:
call	sub_4013D2 ; to convert lower case to upper case 
inc	esi ; increase the esi move to next char 
jmp	short loc_401383

loc_40139C:
pop	esi ; 
call	sub_4013C2 ; //adding the ascii values  
xor	edi, 5678h  ; xor the result with 5678h
mov	eax, edi  ; move the result in eax
jmp	short locret_4013C1 ; exit the function 

;display the no luck message is message is no [a-zA-Z];
loc_4013AC:
pop	esi
push	30h		; uType
push	offset aNoLuck	; "No luck!"
push	offset aNoLuckThereMat ; "No luck there, mate!"
push	dword ptr [ebp+8] ; hWnd
call	MessageBoxA

locret_4013C1:
retn
sub_40137E endp


;; to convert the value to upper case 
;; subtract the 20h or 32 from the lower case it will return value to upper case 
;; like v ascii=118 ;  118 - 32 = 86; 86 is ascii of V ;)
sub_4013C2 proc near
sub     al, 20h ; subtract 20; to convert into upper case 
mov     [esi], al ; moveis to the esi address 
retn
sub_4013C2 endp



;adding the ascii values of chars ;
; return value is in edi
sub_4013C2 proc	near
xor	edi, edi ; empty the edi i.e edi =0
xor	ebx, ebx ; empty the ebx i.e  ebx = 0

loc_4013C6: ;@@ loop
mov	bl, [esi] ; first value  
test	bl, bl ; test for zero or NULL
jz	short locret_4013D1 ;if zero  exit the funtion with return 0 
add	edi, ebx ; else add edi and ebx 
inc	esi ; inc esi point next value 
jmp	short loc_4013C6 ; @@ loop

locret_4013D1:
retn
sub_4013C2 endp



;for paswword function ;
sub_4013D8 proc	near

arg_0= dword ptr  4  ;take the input argument 

xor	eax, eax ;clear eax ,NULL
xor	edi, edi ; clear edi ,NULL
xor	ebx, ebx ; clear ebx ,NULL
mov	esi, [esp+arg_0] ; pointing to the parameter in stack 


loc_4013E2: ; @@loop
mov	al, 0Ah ; move A or 10 to al or eax
mov	bl, [esi] ; copy the value at esi to ebx
test	bl, bl ; test for null 
jz	short loc_4013F5 ; if ebx is 0 goto to loc_4013F5
sub	bl, 30h ; else subtract 30h 48 from ebx
imul	edi, eax ;multiply edi and eax i.e edi and Ah
add	edi, ebx ; add edi and ebx
inc	esi ; point to next value of string 
jmp	short loc_4013E2 ;@@loop

loc_4013F5:
xor	edi, 1234h ; Xor with 1234h
mov	ebx, edi ; move the edi value to ebx 
retn 
sub_4013D8 endp

